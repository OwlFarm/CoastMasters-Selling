'use client';

import * as React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from './ui/textarea';
import { devalkSellFormSchema } from '@/lib/schemas';
import { useToast } from '@/hooks/use-toast';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

export type FormValues = z.infer<typeof devalkSellFormSchema>;

export default function DeValkAlignedSellForm() {
  const { toast } = useToast();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [migrationStatus, setMigrationStatus] = useState('');
  const [isMigrating, setIsMigrating] = useState(false);
  const [devalkUrl, setDevalkUrl] = useState('');

  const form = useForm<FormValues>({
    resolver: zodResolver(devalkSellFormSchema),
    defaultValues: {
      keyDetails: {},
      generalInfo: {},
      accommodation: {},
      machinery: {},
      navigation: {},
      equipment: {},
      rigging: {},
      indicationRatios: {},
    },
  });

  const handleDeValkMigration = async () => {
    if (!devalkUrl.trim()) {
      setMigrationStatus('❌ Please enter a De Valk URL');
      return;
    }

    setIsMigrating(true);
    setMigrationStatus('🔄 Starting De Valk migration...');

    try {
      // Call our De Valk parser
      const response = await fetch('/api/scrape-devalk', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url: devalkUrl }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        setMigrationStatus('✅ De Valk data extracted successfully!');
        
        // Populate form with extracted data
        populateFormWithDeValkData(data.data);
        
      } else {
        setMigrationStatus(`❌ Migration failed: ${data.error}`);
      }
    } catch (error) {
      console.error('Migration error:', error);
      setMigrationStatus(`❌ Migration failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsMigrating(false);
    }
  };

  const populateFormWithDeValkData = (data: any) => {
    console.log('🚀 Populating form with De Valk data:', data);
    
    // Map De Valk data to form fields - explicit mapping to avoid TypeScript issues
    if (data.keyDetails) {
      console.log('🔑 Setting keyDetails:', data.keyDetails);
      if (data.keyDetails.dimensions) form.setValue('keyDetails.dimensions', data.keyDetails.dimensions);
      if (data.keyDetails.material) form.setValue('keyDetails.material', data.keyDetails.material);
      if (data.keyDetails.built) form.setValue('keyDetails.built', data.keyDetails.built);
      if (data.keyDetails.engines) form.setValue('keyDetails.engines', data.keyDetails.engines);
      if (data.keyDetails.hpKw) form.setValue('keyDetails.hpKw', data.keyDetails.hpKw);
      if (data.keyDetails.lying) form.setValue('keyDetails.lying', data.keyDetails.lying);
      if (data.keyDetails.salesOffice) form.setValue('keyDetails.salesOffice', data.keyDetails.salesOffice);
      if (data.keyDetails.status) form.setValue('keyDetails.status', data.keyDetails.status);
      if (data.keyDetails.vat) form.setValue('keyDetails.vat', data.keyDetails.vat);
      if (data.keyDetails.askingPrice) form.setValue('keyDetails.askingPrice', data.keyDetails.askingPrice);
    }
    
    if (data.generalInfo) {
      console.log('📋 Setting generalInfo:', data.generalInfo);
      if (data.generalInfo.model) form.setValue('generalInfo.model', data.generalInfo.model);
      if (data.generalInfo.type) form.setValue('generalInfo.type', data.generalInfo.type);
      if (data.generalInfo.loaM) form.setValue('generalInfo.loaM', data.generalInfo.loaM);
      if (data.generalInfo.lwlM) form.setValue('generalInfo.lwlM', data.generalInfo.lwlM);
      if (data.generalInfo.beamM) form.setValue('generalInfo.beamM', data.generalInfo.beamM);
      if (data.generalInfo.draftM) form.setValue('generalInfo.draftM', data.generalInfo.draftM);
      if (data.generalInfo.airDraftM) form.setValue('generalInfo.airDraftM', data.generalInfo.airDraftM);
      if (data.generalInfo.headroomM) form.setValue('generalInfo.headroomM', data.generalInfo.headroomM);
      if (data.generalInfo.yearBuilt) form.setValue('generalInfo.yearBuilt', data.generalInfo.yearBuilt);
      if (data.generalInfo.builder) form.setValue('generalInfo.builder', data.generalInfo.builder);
      if (data.generalInfo.country) form.setValue('generalInfo.country', data.generalInfo.country);
      if (data.generalInfo.designer) form.setValue('generalInfo.designer', data.generalInfo.designer);
      if (data.generalInfo.displacementT) form.setValue('generalInfo.displacementT', data.generalInfo.displacementT);
      if (data.generalInfo.ballastTonnes) form.setValue('generalInfo.ballastTonnes', data.generalInfo.ballastTonnes);
      if (data.generalInfo.hullMaterial) form.setValue('generalInfo.hullMaterial', data.generalInfo.hullMaterial);
      if (data.generalInfo.hullColour) form.setValue('generalInfo.hullColour', data.generalInfo.hullColour);
      if (data.generalInfo.hullShape) form.setValue('generalInfo.hullShape', data.generalInfo.hullShape);
      if (data.generalInfo.keelType) form.setValue('generalInfo.keelType', data.generalInfo.keelType);
      if (data.generalInfo.superstructureMaterial) form.setValue('generalInfo.superstructureMaterial', data.generalInfo.superstructureMaterial);
      if (data.generalInfo.deckMaterial) form.setValue('generalInfo.deckMaterial', data.generalInfo.deckMaterial);
      if (data.generalInfo.deckFinish) form.setValue('generalInfo.deckFinish', data.generalInfo.deckFinish);
      if (data.generalInfo.superstructureDeckFinish) form.setValue('generalInfo.superstructureDeckFinish', data.generalInfo.superstructureDeckFinish);
      if (data.generalInfo.cockpitDeckFinish) form.setValue('generalInfo.cockpitDeckFinish', data.generalInfo.cockpitDeckFinish);
      if (data.generalInfo.dorades) form.setValue('generalInfo.dorades', data.generalInfo.dorades);
      if (data.generalInfo.windowFrame) form.setValue('generalInfo.windowFrame', data.generalInfo.windowFrame);
      if (data.generalInfo.windowMaterial) form.setValue('generalInfo.windowMaterial', data.generalInfo.windowMaterial);
      if (data.generalInfo.deckHatch) form.setValue('generalInfo.deckHatch', data.generalInfo.deckHatch);
      if (data.generalInfo.fuelTankLitre) form.setValue('generalInfo.fuelTankLitre', data.generalInfo.fuelTankLitre);
      if (data.generalInfo.levelIndicatorFuelTank) form.setValue('generalInfo.levelIndicatorFuelTank', data.generalInfo.levelIndicatorFuelTank);
      if (data.generalInfo.freshwaterTankLitre) form.setValue('generalInfo.freshwaterTankLitre', data.generalInfo.freshwaterTankLitre);
      if (data.generalInfo.levelIndicatorFreshwater) form.setValue('generalInfo.levelIndicatorFreshwater', data.generalInfo.levelIndicatorFreshwater);
      if (data.generalInfo.wheelSteering) form.setValue('generalInfo.wheelSteering', data.generalInfo.wheelSteering);
      if (data.generalInfo.outsideHelmPosition) form.setValue('generalInfo.outsideHelmPosition', data.generalInfo.outsideHelmPosition);
    }
    
    // Force form to re-render
    form.trigger();
    
    console.log('✅ Form populated with De Valk data');
    console.log('🔍 Current form values:', form.getValues());
  };

  const onSubmit = (data: FormValues) => {
    console.log('🚀 De Valk Form Data Submitted:', data);
    // Handle form submission
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">
            🚤 De Valk Aligned Yacht Form
          </h1>
          <p className="text-lg text-gray-600">
            Perfect 1:1 field mapping with De Valk source structure
          </p>
        </div>

        {/* Migration Section */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>🔄 De Valk Migration</CardTitle>
            <CardDescription>
              Migrate data from De Valk yacht listings
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex gap-4">
              <Input
                type="url"
                value={devalkUrl}
                onChange={(e) => setDevalkUrl(e.target.value)}
                placeholder="Enter De Valk URL (e.g., https://www.devalk.nl/en/yachtbrokerage/yachts/...)"
                className="flex-1"
              />
              <Button
                onClick={handleDeValkMigration}
                disabled={isMigrating}
                className="px-6"
              >
                {isMigrating ? '🔄 Migrating...' : '🚀 Migrate'}
              </Button>
            </div>
            
            {migrationStatus && (
              <div className={`p-4 rounded-md ${
                migrationStatus.includes('✅') ? 'bg-green-50 text-green-800' :
                migrationStatus.includes('❌') ? 'bg-red-50 text-red-800' :
                'bg-blue-50 text-blue-800'
              }`}>
                {migrationStatus}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Form Content */}
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            
            {/* Key Details Section */}
            <Card>
              <CardHeader>
                <CardTitle>🔑 Key Details (De Valk Exact Structure)</CardTitle>
                <CardDescription>
                  Essential yacht specifications and pricing information
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="keyDetails.dimensions"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>DIMENSIONS</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 14.96 x 4.42 x 2.20 (m)" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="keyDetails.material"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>MATERIAL</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., GRP" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="keyDetails.built"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>BUILT</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 1990" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="keyDetails.engines"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ENGINE(S)</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 1x Volvo Penta TMD41A diesel" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="keyDetails.hpKw"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>HP/KW</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 1x 143.00(hp), 105.25(kw)" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="keyDetails.askingPrice"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ASKING PRICE</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., € 275.000" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </CardContent>
            </Card>

            {/* General Information Section */}
            <Card>
              <CardHeader>
                <CardTitle>📋 General Information (De Valk Exact Structure)</CardTitle>
                <CardDescription>
                  Basic yacht specifications and details
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  <FormField
                    control={form.control}
                    name="generalInfo.model"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>MODEL</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., HALLBERG RASSY 49" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.type"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>TYPE</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., monohull sailing yacht" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.loaM"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>LOA (M)</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 14.96" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.beamM"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>BEAM (M)</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 4.42" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.draftM"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>DRAFT (M)</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 2.20" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.yearBuilt"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>YEAR BUILT</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 1990" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.builder"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>BUILDER</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Hallberg Rassy" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.country"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>COUNTRY</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Sweden" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.designer"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>DESIGNER</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Olle Enderlein" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="generalInfo.hullMaterial"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>HULL MATERIAL</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., GRP" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Submit Button */}
            <div className="flex justify-end">
              <Button
                type="submit"
                className="px-8 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors"
              >
                🚀 Submit De Valk Form
              </Button>
            </div>
          </form>
        </Form>
      </div>
    </div>
  );
}
